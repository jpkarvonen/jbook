{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator } from './commands';\nimport \"./index.css\";\n\nfunction setGroupPopFalse(data) {\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _classnames;\n\n  var _ref = props || {},\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n      className = _ref.className,\n      propsValue = _ref.value,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n      _ref$height = _ref.height,\n      heightWarp = _ref$height === void 0 ? 200 : _ref$height,\n      _ref$visiableDragbar = _ref.visiableDragbar,\n      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n      _ref$preview = _ref.preview,\n      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n      isfullscreen = _ref.fullscreen,\n      previewOptions = _ref.previewOptions,\n      textareaProps = _ref.textareaProps,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n      autoFocus = _ref.autoFocus,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      onChange = _ref.onChange,\n      hideToolbar = _ref.hideToolbar,\n      other = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"value\", \"commands\", \"height\", \"visiableDragbar\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"]);\n\n  var _useState = useState(propsValue || ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(previewType),\n      _useState4 = _slicedToArray(_useState3, 2),\n      preview = _useState4[0],\n      setPreview = _useState4[1];\n\n  var _useState5 = useState(isfullscreen || false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFullscreen = _useState6[0],\n      setIsFullscreen = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      groupPop = _useState8[0],\n      setGroupPop = _useState8[1];\n\n  var leftScroll = useRef(false);\n  var previewRef = /*#__PURE__*/React.createRef();\n\n  var _useState9 = useState(heightWarp),\n      _useState10 = _slicedToArray(_useState9, 2),\n      height = _useState10[0],\n      setHeight = _useState10[1];\n\n  var textarea = /*#__PURE__*/React.createRef();\n  var commandOrchestrator = useRef();\n  var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-show-\").concat(preview), preview), _defineProperty(_classnames, \"\".concat(prefixCls, \"-fullscreen\"), isFullscreen), _classnames));\n  useEffect(function () {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator(textarea.current.text.current || null);\n  }, []);\n  useMemo(function () {\n    return preview !== props.preview && props.preview && setPreview(props.preview);\n  }, [props.preview]);\n  useMemo(function () {\n    return value !== props.value && setValue(props.value);\n  }, [props.value]);\n  useMemo(function () {\n    return height !== props.height && setHeight(heightWarp);\n  }, [heightWarp]);\n\n  function handleChange(mdStr) {\n    setValue(mdStr);\n    onChange && onChange(mdStr || '');\n  }\n\n  function handleCommand(command, groupName) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value);\n    }\n\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n\n    if (command.keyCommand === 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, setGroupPopFalse(groupPop)), {}, _defineProperty({}, \"\".concat(groupName), true)));\n    }\n\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, groupPop), {}, _defineProperty({}, \"\".concat(groupName), false)));\n    }\n\n    commandOrchestrator.current.executeCommand(command);\n  }\n\n  function handleScroll(e) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n\n    var previewDom = previewRef.current.mdp.current;\n    var textareaDom = textarea.current.warp.current;\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n\n  var chestratorObj = useMemo(function () {\n    return commandOrchestrator.current;\n  }, [commandOrchestrator.current]);\n\n  var mdProps = _objectSpread(_objectSpread({}, previewOptions), {}, {\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cls,\n    onClick: function onClick() {\n      return setGroupPop(_objectSpread({}, setGroupPopFalse(groupPop)));\n    },\n    style: {\n      height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height\n    }\n  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n    active: _objectSpread({\n      fullscreen: isFullscreen,\n      preview: preview\n    }, groupPop),\n    prefixCls: prefixCls,\n    commands: commands,\n    commandHelp: _objectSpread({\n      getState: commandOrchestrator.current && commandOrchestrator.current.getState,\n      textApi: commandOrchestrator.current && commandOrchestrator.current.textApi\n    }, chestratorObj),\n    onCommand: handleCommand\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\"),\n    style: {\n      height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29\n    }\n  }, /(edit|live)/.test(preview) && /*#__PURE__*/React.createElement(TextArea, _extends({\n    ref: textarea,\n    tabSize: tabSize,\n    className: \"\".concat(prefixCls, \"-input\"),\n    prefixCls: prefixCls,\n    value: value,\n    autoFocus: autoFocus\n  }, textareaProps, {\n    onScroll: handleScroll,\n    onMouseOver: function onMouseOver() {\n      return leftScroll.current = true;\n    },\n    onMouseLeave: function onMouseLeave() {\n      return leftScroll.current = false;\n    },\n    onChange: handleChange\n  })), /(live|preview)/.test(preview) && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, mdProps, {\n    className: \"\".concat(prefixCls, \"-preview\")\n  })), visiableDragbar && !isFullscreen && /*#__PURE__*/React.createElement(DragBar, {\n    prefixCls: prefixCls,\n    height: height,\n    maxHeight: maxHeight,\n    minHeight: minHeight,\n    onChange: function onChange(newHeight) {\n      setHeight(newHeight);\n    }\n  })));\n};\n\nvar MDEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nMDEditor.Markdown = MarkdownPreview;\nexport default MDEditor;","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useRef","useState","classnames","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","TextAreaCommandOrchestrator","setGroupPopFalse","data","Object","keys","forEach","keyname","InternalMDEditor","props","ref","prefixCls","className","propsValue","value","commands","height","heightWarp","visiableDragbar","preview","previewType","isfullscreen","fullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","setValue","setPreview","isFullscreen","setIsFullscreen","groupPop","setGroupPop","leftScroll","previewRef","createRef","setHeight","textarea","commandOrchestrator","cls","current","text","handleChange","mdStr","handleCommand","command","groupName","keyCommand","document","body","style","overflow","executeCommand","handleScroll","e","mdp","warp","previewDom","textareaDom","scale","scrollHeight","offsetHeight","target","scrollTop","chestratorObj","mdProps","onScroll","source","onClick","Number","active","commandHelp","getState","textApi","onCommand","test","onMouseOver","onMouseLeave","newHeight","MDEditor","forwardRef","Markdown"],"sources":["/Users/karvonen/Valet/udemy-port/local-client/node_modules/@uiw/react-md-editor/src/Editor.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach(keyname => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (props: MDEditorProps, \n  ref?:\n    | ((instance: HTMLDivElement) => void)\n    | React.RefObject<HTMLDivElement | null>\n    | null\n  ) => {\n  const { prefixCls = 'w-md-editor', className, value: propsValue, commands = getCommands(), height: heightWarp = 200, visiableDragbar = true, preview: previewType = 'live', fullscreen: isfullscreen, previewOptions, textareaProps, maxHeight = 1200, minHeight = 100, autoFocus, tabSize = 2, onChange, hideToolbar, ...other } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '')\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n  \n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>()\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextArea>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>()\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n  useEffect(() => {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator((textarea.current!.text.current || null) as HTMLTextAreaElement);\n  }, []);\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n\n  function handleChange(mdStr?: string) {\n    setValue(mdStr!);\n    onChange && onChange(mdStr || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current! as HTMLDivElement;\n    const textareaDom = textarea.current.warp.current! as HTMLDivElement;\n    if (textareaDom && previewDom) {\n      const scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestrator.current, [commandOrchestrator.current]);\n  const mdProps = {\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown as MarkdownPreviewProps;\n  return (\n    <div className={cls} onClick={() => setGroupPop({...setGroupPopFalse(groupPop)})} style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }} {...other}>\n      {!hideToolbar && (\n        <Toolbar\n          active={{\n            fullscreen: isFullscreen,\n            preview: preview,\n            ...groupPop\n          }}\n          prefixCls={prefixCls}\n          commands={commands}\n          commandHelp={{\n            getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n            textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n            ...chestratorObj,\n          }}\n          onCommand={handleCommand}\n        />\n      )}\n      <div\n        className={`${prefixCls}-content`}\n        style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n      >\n        {/(edit|live)/.test(preview as string) && (\n          <TextArea\n            ref={textarea}\n            tabSize={tabSize}\n            className={`${prefixCls}-input`}\n            prefixCls={prefixCls}\n            value={value}\n            autoFocus={autoFocus}\n            {...textareaProps}\n            onScroll={handleScroll}\n            onMouseOver={() => leftScroll.current = true}\n            onMouseLeave={() => leftScroll.current = false}\n            onChange={handleChange}\n          />\n        )}\n        {/(live|preview)/.test(preview as string) && (\n          <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`}/>\n        )}\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"]},"metadata":{},"sourceType":"module"}