{"ast":null,"code":"var _jsxFileName = \"/Users/karvonen/Valet/udemy-port/jbook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport MonacoEditor from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = _ref => {\n  _s();\n\n  let {\n    onChange,\n    initialValue\n  } = _ref;\n  const editorRef = useRef();\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  const onFormatClick = () => {\n    //get current value\n    const unformatted = editorRef.current.getModel().getValue(); //format value\n\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }); //set formatted value back in the editor\n\n    console.log(editorRef.current);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      height: \"500px\",\n      options: {\n        wordWrap: 'on',\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/src/components/code-editor.tsx"],"names":["useRef","MonacoEditor","prettier","parser","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","console","log","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAA6C,sBAA7C;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;;AAOA,MAAMC,UAAqC,GAAG,QAAgC;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA+B;AAC5E,QAAMC,SAAS,GAAGP,MAAM,EAAxB;;AACA,QAAMQ,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACnEH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAM;AACzCP,MAAAA,QAAQ,CAACI,QAAQ,EAAT,CAAR;AACD,KAFD;AAIA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AACD,GAPD;;AAQA,QAAMC,aAAa,GAAG,MAAM;AAC1B;AACA,UAAMC,WAAW,GAAGV,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAF0B,CAG1B;;AACA,UAAMS,SAAS,GAAGhB,QAAQ,CAACiB,MAAT,CAAgBF,WAAhB,EAA6B;AAC7Cd,MAAAA,MAAM,EAAE,OADqC;AAE7CiB,MAAAA,OAAO,EAAE,CAACjB,MAAD,CAFoC;AAG7CkB,MAAAA,OAAO,EAAE,KAHoC;AAI7CC,MAAAA,IAAI,EAAE,IAJuC;AAK7CC,MAAAA,WAAW,EAAE;AALgC,KAA7B,CAAlB,CAJ0B,CAW1B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,SAAS,CAACI,OAAtB;AACD,GAbD;;AAcA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEK,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,cAAc,EAAER,gBADlB;AAEE,MAAA,KAAK,EAAEF,YAFT;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,QAAQ,EAAC,YAJX;AAKE,MAAA,MAAM,EAAC,OALT;AAME,MAAA,OAAO,EAAE;AACPoB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFF;AAGPC,QAAAA,UAAU,EAAE,KAHL;AAIPC,QAAAA,OAAO,EAAE,KAJF;AAKPC,QAAAA,mBAAmB,EAAE,CALd;AAMPC,QAAAA,QAAQ,EAAE,EANH;AAOPC,QAAAA,oBAAoB,EAAE,KAPf;AAQPC,QAAAA,eAAe,EAAE;AARV;AANX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA9CD;;GAAM9B,U;;KAAAA,U;AAgDN,eAAeA,UAAf","sourcesContent":["import { useRef } from 'react';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const editorRef = useRef<any>();\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n  const onFormatClick = () => {\n    //get current value\n    const unformatted = editorRef.current.getModel().getValue();\n    //format value\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true,\n    });\n    //set formatted value back in the editor\n    console.log(editorRef.current);\n  };\n  return (\n    <div>\n      <button onClick={onFormatClick}>Format</button>\n      <MonacoEditor\n        editorDidMount={onEditorDidMount}\n        value={initialValue}\n        theme=\"dark\"\n        language=\"javascript\"\n        height=\"500px\"\n        options={{\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}