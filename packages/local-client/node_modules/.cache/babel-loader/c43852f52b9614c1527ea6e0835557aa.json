{"ast":null,"code":"var _jsxFileName = \"/Users/karvonen/Valet/udemy-port/jbook/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextEditor = () => {\n  _s();\n\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState('# Header');\n  const ref = useRef(null);\n  useEffect(() => {\n    const listener = event => {\n      if (ref.current && event.target && ref.current.contains(event.target)) {\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener('click', listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener('click', listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor\",\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: value,\n        onChange: v => setValue(v || '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-editor card\",\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n      source: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextEditor, \"rFj/CYaoe8e6BiPdT5/DNM+8r1E=\");\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/src/components/text-editor.tsx"],"names":["MDEditor","useState","useEffect","useRef","TextEditor","editing","setEditing","value","setValue","ref","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","v"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,UAAD,CAAlC;AACA,QAAMQ,GAAG,GAAGN,MAAM,CAAwB,IAAxB,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAIC,KAAD,IAAuB;AACtC,UACEF,GAAG,CAACG,OAAJ,IACAD,KAAK,CAACE,MADN,IAEAJ,GAAG,CAACG,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAHF,EAIE;AACA;AACD;;AACDP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATD;;AAUAS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA7C;AAEA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAhD;AACD,KAFD;AAGD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIZ,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAEI,GAAlC;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEF,KAAjB;AAAwB,QAAA,QAAQ,EAAGY,CAAD,IAAOX,QAAQ,CAACW,CAAC,IAAI,EAAN;AAAjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAE,MAAMb,UAAU,CAAC,IAAD,CAA3D;AAAA,2BACE,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,MAAM,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApCD;;GAAMH,U;;KAAAA,U;AAsCN,eAAeA,UAAf","sourcesContent":["import './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useState, useEffect, useRef } from 'react';\n\nconst TextEditor: React.FC = () => {\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState('# Header');\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (\n        ref.current &&\n        event.target &&\n        ref.current.contains(event.target as Node)\n      ) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener('click', listener, { capture: true });\n\n    return () => {\n      document.removeEventListener('click', listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div className=\"text-editor\" ref={ref}>\n        <MDEditor value={value} onChange={(v) => setValue(v || '')} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"text-editor card\" onClick={() => setEditing(true)}>\n      <MDEditor.Markdown source={value} />\n    </div>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}