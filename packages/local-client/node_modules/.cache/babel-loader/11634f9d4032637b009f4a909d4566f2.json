{"ast":null,"code":"import'./add-cell.css';import{useActions}from'../hooks/use-actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddCell=function AddCell(_ref){var forceVisible=_ref.forceVisible,previousCellId=_ref.previousCellId;var _useActions=useActions(),insertCellAfter=_useActions.insertCellAfter;return/*#__PURE__*/_jsxs(\"div\",{className:\"add-cell \".concat(forceVisible&&'force-visible'),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"add-buttons\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"button is-rounded is-primary is-small\",onClick:function onClick(){return insertCellAfter(previousCellId,'code');},children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon is-small\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-plus\"})}),/*#__PURE__*/_jsx(\"span\",{children:\"Code\"})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"button is-rounded is-primary is-small\",onClick:function onClick(){return insertCellAfter(previousCellId,'text');},children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon is-small\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-plus\"})}),/*#__PURE__*/_jsx(\"span\",{children:\"Text\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"divider\"})]});};export default AddCell;","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/src/components/add-cell.tsx"],"names":["useActions","AddCell","forceVisible","previousCellId","insertCellAfter"],"mappings":"AAAA,MAAO,gBAAP,CACA,OAASA,UAAT,KAA2B,sBAA3B,C,wFAOA,GAAMC,CAAAA,OAA+B,CAAG,QAAlCA,CAAAA,OAAkC,MAAsC,IAAnCC,CAAAA,YAAmC,MAAnCA,YAAmC,CAArBC,cAAqB,MAArBA,cAAqB,CAC5E,gBAA4BH,UAAU,EAAtC,CAAQI,eAAR,aAAQA,eAAR,CAEA,mBACE,aAAK,SAAS,oBAAcF,YAAY,EAAI,eAA9B,CAAd,wBACE,aAAK,SAAS,CAAC,aAAf,wBACE,gBACE,SAAS,CAAC,uCADZ,CAEE,OAAO,CAAE,yBAAME,CAAAA,eAAe,CAACD,cAAD,CAAiB,MAAjB,CAArB,EAFX,wBAIE,aAAM,SAAS,CAAC,eAAhB,uBACE,UAAG,SAAS,CAAC,aAAb,EADF,EAJF,cAOE,8BAPF,GADF,cAUE,gBACE,SAAS,CAAC,uCADZ,CAEE,OAAO,CAAE,yBAAMC,CAAAA,eAAe,CAACD,cAAD,CAAiB,MAAjB,CAArB,EAFX,wBAIE,aAAM,SAAS,CAAC,eAAhB,uBACE,UAAG,SAAS,CAAC,aAAb,EADF,EAJF,cAOE,8BAPF,GAVF,GADF,cAqBE,YAAK,SAAS,CAAC,SAAf,EArBF,GADF,CAyBD,CA5BD,CA8BA,cAAeF,CAAAA,OAAf","sourcesContent":["import './add-cell.css';\nimport { useActions } from '../hooks/use-actions';\n\ninterface AddCellProps {\n  previousCellId: string | null;\n  forceVisible?: boolean;\n}\n\nconst AddCell: React.FC<AddCellProps> = ({ forceVisible, previousCellId }) => {\n  const { insertCellAfter } = useActions();\n\n  return (\n    <div className={`add-cell ${forceVisible && 'force-visible'}`}>\n      <div className=\"add-buttons\">\n        <button\n          className=\"button is-rounded is-primary is-small\"\n          onClick={() => insertCellAfter(previousCellId, 'code')}\n        >\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-plus\" />\n          </span>\n          <span>Code</span>\n        </button>\n        <button\n          className=\"button is-rounded is-primary is-small\"\n          onClick={() => insertCellAfter(previousCellId, 'text')}\n        >\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-plus\" />\n          </span>\n          <span>Text</span>\n        </button>\n      </div>\n      <div className=\"divider\"></div>\n    </div>\n  );\n};\n\nexport default AddCell;\n"]},"metadata":{},"sourceType":"module"}