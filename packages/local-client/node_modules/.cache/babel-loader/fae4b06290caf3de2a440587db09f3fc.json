{"ast":null,"code":"import _asyncToGenerator from\"/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/node_modules/@babel/runtime/regenerator/index.js\";import{ActionType}from'../action-types';import bundle from'../../bundler';export var updateCell=function updateCell(id,content){return{type:ActionType.UPDATE_CELL,payload:{id:id,content:content}};};export var deleteCell=function deleteCell(id){return{type:ActionType.DELETE_CELL,payload:id};};export var moveCell=function moveCell(id,direction){return{type:ActionType.MOVE_CELL,payload:{id:id,direction:direction}};};export var insertCellAfter=function insertCellAfter(id,type){return{type:ActionType.INSERT_CELL_AFTER,payload:{id:id,type:type}};};export var createBundle=function createBundle(cellId,input){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ActionType.BUNDLE_START,payload:{cellId:cellId}});_context.next=3;return bundle(input);case 3:result=_context.sent;dispatch({type:ActionType.BUNDLE_COMPLETE,payload:{cellId:cellId,bundle:result}});case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/src/state/action-creators/index.ts"],"names":["ActionType","bundle","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE"],"mappings":"uSACA,OAASA,UAAT,KAA2B,iBAA3B,CAEA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CAUA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,EAAD,CAAaC,OAAb,CAAmD,CAC3E,MAAO,CACLC,IAAI,CAAEL,UAAU,CAACM,WADZ,CAELC,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPC,OAAO,CAAPA,OAFO,CAFJ,CAAP,CAOD,CARM,CAUP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACL,EAAD,CAAkC,CAC1D,MAAO,CACLE,IAAI,CAAEL,UAAU,CAACS,WADZ,CAELF,OAAO,CAAEJ,EAFJ,CAAP,CAID,CALM,CAOP,MAAO,IAAMO,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACP,EAAD,CAAaQ,SAAb,CAAsD,CAC5E,MAAO,CACLN,IAAI,CAAEL,UAAU,CAACY,SADZ,CAELL,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPQ,SAAS,CAATA,SAFO,CAFJ,CAAP,CAOD,CARM,CAUP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BV,EAD6B,CAE7BE,IAF6B,CAGH,CAC1B,MAAO,CACLA,IAAI,CAAEL,UAAU,CAACc,iBADZ,CAELP,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPE,IAAI,CAAJA,IAFO,CAFJ,CAAP,CAOD,CAXM,CAaP,MAAO,IAAMU,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAAiBC,KAAjB,CAAmC,CAC7D,+FAAO,iBAAOC,QAAP,6HACLA,QAAQ,CAAC,CACPb,IAAI,CAAEL,UAAU,CAACmB,YADV,CAEPZ,OAAO,CAAE,CACPS,MAAM,CAANA,MADO,CAFF,CAAD,CAAR,CADK,sBAQgBf,CAAAA,MAAM,CAACgB,KAAD,CARtB,QAQCG,MARD,eAULF,QAAQ,CAAC,CACPb,IAAI,CAAEL,UAAU,CAACqB,eADV,CAEPd,OAAO,CAAE,CACPS,MAAM,CAANA,MADO,CAEPf,MAAM,CAAEmB,MAFD,CAFF,CAAD,CAAR,CAVK,sDAAP,+DAkBD,CAnBM","sourcesContent":["import { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\nimport { CellTypes } from '../cell';\nimport bundle from '../../bundler';\nimport {\n  Action,\n  UpdateCellAction,\n  DeleteCellAction,\n  MoveCellAction,\n  InsertCellAfterAction,\n  Direction,\n} from '../actions';\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  type: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}