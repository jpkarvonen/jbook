{"ast":null,"code":"export default function getSurroundingWord(text, position) {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  var isWordDelimiter = function isWordDelimiter(c) {\n    return c === \" \" || c.charCodeAt(0) === 10;\n  }; // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n\n\n  var start = 0; // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n\n  var end = text.length; // iterate to the left\n\n  for (var i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  } // iterate to the right\n\n\n  for (var _i = position; _i < text.length; _i++) {\n    if (isWordDelimiter(text[_i])) {\n      end = _i;\n      break;\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}","map":{"version":3,"mappings":"AAEA,eAAe,SAASA,kBAAT,CAA4BC,IAA5B,EAA0CC,QAA1C,EAAuE;AACpF,MAAI,CAACD,IAAL,EAAW,MAAME,KAAK,CAAC,kCAAD,CAAX;;AAEX,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD;AAAA,WAAeA,CAAC,KAAK,GAANA,IAAaA,CAAC,CAACC,UAAFD,CAAa,CAAbA,MAAoB,EAAhD;AAAxB,IAHoF,CAKpF;;;AACA,MAAIE,KAAK,GAAG,CAAZ,CANoF,CAOpF;;AACA,MAAIC,GAAG,GAAGP,IAAI,CAACQ,MAAf,CARoF,CAUpF;;AACA,OAAK,IAAIC,CAAC,GAAGR,QAAb,EAAuBQ,CAAC,GAAG,CAAJA,GAAQ,CAAC,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACtC,QAAIN,eAAe,CAACH,IAAI,CAACS,CAAC,GAAG,CAAL,CAAL,CAAnB,EAAkC;AAChCH,WAAK,GAAGG,CAARH;AACA;AACD;AAfiF,IAkBpF;;;AACA,OAAK,IAAIG,EAAC,GAAGR,QAAb,EAAuBQ,EAAC,GAAGT,IAAI,CAACQ,MAAhC,EAAwCC,EAAC,EAAzC,EAA6C;AAC3C,QAAIN,eAAe,CAACH,IAAI,CAACS,EAAD,CAAL,CAAnB,EAA8B;AAC5BF,SAAG,GAAGE,EAANF;AACA;AACD;AACF;;AAED,SAAO;AAAED,SAAK,EAALA,KAAF;AAASC,OAAG,EAAHA;AAAT,GAAP;AACD","names":["getSurroundingWord","text","position","Error","isWordDelimiter","c","charCodeAt","start","end","length","i"],"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/node_modules/@uiw/react-md-editor/src/utils/getSurroundingWord.ts"],"sourcesContent":["import { TextRange } from '../commands';\n\nexport default function getSurroundingWord(text: string, position: number): TextRange {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  const isWordDelimiter = (c: string) => c === \" \" || c.charCodeAt(0) === 10;\n\n  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n  let start = 0;\n  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n  let end = text.length;\n\n  // iterate to the left\n  for (let i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  }\n\n  // iterate to the right\n  for (let i = position; i < text.length; i++) {\n    if (isWordDelimiter(text[i])) {\n      end = i;\n      break;\n    }\n  }\n\n  return { start, end };\n}"]},"metadata":{},"sourceType":"module"}