{"ast":null,"code":"var _jsxFileName = \"/Users/karvonen/Valet/udemy-port/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector('#root');\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root)\n        } else {\n          root.innerHTML =  JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML =  value;\n      }\n    };\n    `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cell.id) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"r5M9pii0T6hMXRNyIRC8DN3Hi6E=\", false, function () {\n  return [useActions, useTypedSelector, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","data","order","cells","orderedCells","map","showFunc","showFuncNoop","c","type","push","content","join","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":"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","sourcesContent":["import './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\ninterface CodeCellProps {\n  cell: Cell;\n}\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n  const cumulativeCode = useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector('#root');\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root)\n        } else {\n          root.innerHTML =  JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML =  value;\n      }\n    };\n    `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cell.id) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  });\n\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n      return;\n    }\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div\n        style={{\n          height: 'calc(100% - 10px)',\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        <div className=\"progress-wrapper\">\n          {!bundle || bundle.loading ? (\n            <div className=\"progress-cover\">\n              <progress className=\"progress is-small is-primary\" max=\"100\">\n                Loading\n              </progress>\n            </div>\n          ) : (\n            <Preview code={bundle.code} err={bundle.err} />\n          )}\n        </div>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}