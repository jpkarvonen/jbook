{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  raise(_ref, origin) {\n    let {\n      code,\n      reasonCode,\n      template\n    } = _ref;\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    return this.raiseWithData(origin.node ? origin.node.loc.start : origin.at, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(loc, _ref2) {\n    let {\n      code,\n      template\n    } = _ref2;\n\n    for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      params[_key2 - 2] = arguments[_key2];\n    }\n\n    const pos = loc.index;\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(loc, data, errorTemplate) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      params[_key3 - 3] = arguments[_key3];\n    }\n\n    const pos = loc.index;\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nconst {\n  defineProperty\n} = Object;\n\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\n\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = superClass => class extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n\n    return file;\n  }\n\n  parseRegExpLiteral(_ref3) {\n    let {\n      pattern,\n      flags\n    } = _ref3;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n\n      this.toAssignable(value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(ErrorMessages.PatternHasAccessor, {\n        node: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(ErrorMessages.PatternHasMethod, {\n        node: prop.key\n      });\n    } else {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\n\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(ErrorMessages.VarRedeclaration, {\n        at: loc\n      }, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref4) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref4;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach(_ref5 => {\n        let {\n          message,\n          loc\n        } = _ref5;\n        return this.raise(message, {\n          at: loc\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(135);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n\n    if (end === -1) {\n      throw this.raise(ErrorMessages.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(ErrorMessages.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(51, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(47, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(52, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(48, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        this.readToken_atSign();\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(ErrorMessages.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition()\n    }, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(ErrorMessages.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(ErrorMessages.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(ErrorMessages.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n\n        if (mods.includes(char)) {\n          this.raise(ErrorMessages.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(ErrorMessages.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(133, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(ErrorMessages.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(ErrorMessages.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(ErrorMessages.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition()\n          });\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(ErrorMessages.InvalidDigit, {\n            at: this.state.curPosition()\n          }, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(ErrorMessages.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2)\n      }, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(ErrorMessages.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(ErrorMessages.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(131, str);\n      return;\n    }\n\n    this.finishToken(130, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(ErrorMessages.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(ErrorMessages.StrictOctalLiteral, startLoc);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(ErrorMessages.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(ErrorMessages.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(ErrorMessages.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(ErrorMessages.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(ErrorMessages.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(131, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(132, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(130, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(ErrorMessages.InvalidCodePoint, {\n            at: this.state.curPosition()\n          });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(129, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message, loc) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, {\n        at: loc\n      });\n    } else {\n      this.state.strictErrors.set(loc.index, {\n        loc,\n        message\n      });\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, createPositionWithColumnOffset(this.state.curPosition(), -1));\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(ErrorMessages.InvalidEscapeSequence, {\n          at: codeLoc\n        });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(ErrorMessages.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(ErrorMessages.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(128, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(ErrorMessages.InvalidEscapedReservedWord, {\n        at: this.state.startLoc\n      }, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {}\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(ErrorMessages.InvalidPrivateFieldResolution, {\n          at: loc\n        }, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(ErrorMessages.PrivateNameRedeclaration, {\n        at: loc\n      }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, loc) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.raise(ErrorMessages.InvalidPrivateFieldResolution, {\n        at: loc\n      }, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(message, loc) {\n    this.errors.set(loc.index, {\n      message,\n      loc\n    });\n  }\n\n  clearDeclarationError(loc) {\n    this.errors.delete(loc.index);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(loc, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(template, loc);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(template, {\n      at: loc\n    });\n  }\n\n  recordParenthesizedIdentifierError(template, loc) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, {\n        at: loc\n      });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(template, loc) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(template, loc);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref6 => {\n      let {\n        message,\n        loc\n      } = _ref6;\n      this.raise(message, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        throw this.raise(template, {\n          at: this.state.startLoc\n        });\n      }\n\n      throw this.unexpected(null, token);\n    }\n  }\n\n  canInsertSemicolon() {\n    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(ErrorMessages.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  assertNoSpace() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise({\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      }, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n\n  unexpected(loc, type) {\n    throw this.raise({\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: type != null ? `Unexpected token, expected \"${tokenLabelName(type)}\"` : \"Unexpected token\"\n    }, {\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs) {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig, loc) {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(loc != null ? loc : this.state.startLoc, {\n        missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])\n      }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs) {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(this.state.startLoc, {\n        missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map(c => JSON.stringify(c)).join(\", \")}.`);\n    }\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(ErrorMessages.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(ErrorMessages.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(ErrorMessages.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 129 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(107);\n\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(123)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(126)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(125)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(83)) {\n        this.next();\n\n        if (!this.isContextual(126) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            node: bodyElement\n          });\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            node: bodyElement\n          });\n        }\n\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            node: bodyElement\n          });\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc\n        }, label, suggestion);\n      }\n\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(108);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc\n    }, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(126);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(125);\n    node.extends = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref7) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref7;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(115)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            node: variance\n          });\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          node: variance\n        });\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            node: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        node: property.value.this\n      });\n    }\n\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {\n        node: property\n      });\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(ErrorMessages.BadSetterRestParameter, {\n        node: property\n      });\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          node\n        });\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            node\n          });\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 129:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(130)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(131)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected();\n\n      case 130:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 131:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 87:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(125)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 128 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(53)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(125)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(126)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(125)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(126) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n\n    if (this.isContextual(121)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          node: member.value\n        });\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(ErrorMessages.InvalidIdentifier, {\n        at: this.state.curPosition()\n      }, fullWord);\n    }\n\n    this.finishToken(128, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          node: expr.typeAnnotation\n        });\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"TypeCastExpression\") {\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          node: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          node: method\n        });\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          node: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          node: param\n        });\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          node: param\n        });\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          node: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        node: param\n      });\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        node: param\n      });\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        node: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(126)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(ErrorMessages.ImportBindingIsString, {\n            node: specifier\n          }, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        node: specifier\n      });\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              node: typeParameters\n            });\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        node: typeParameters\n      });\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          node: node.params[i]\n        });\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n      if (end === -1) {\n        throw this.raise(ErrorMessages.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2 + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(ErrorMessages.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref8) {\n    let {\n      enumName,\n      memberName\n    } = _ref8;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc\n    }, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(loc, _ref9) {\n    let {\n      enumName,\n      suppliedType\n    } = _ref9;\n    return this.raise(suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, {\n      at: loc\n    }, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(loc, _ref10) {\n    let {\n      enumName,\n      explicitType,\n      memberName\n    } = _ref10;\n    return this.raise(explicitType === \"boolean\" || explicitType === \"number\" || explicitType === \"string\" ? FlowErrors.EnumInvalidMemberInitializerPrimaryType : explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerUnknownType, {\n      at: loc\n    }, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref11) {\n    let {\n      enumName,\n      memberName\n    } = _ref11;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc\n    }, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref12) {\n    let {\n      enumName\n    } = _ref12;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      node\n    }, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 130:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 129:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n\n  flowEnumMembers(_ref13) {\n    let {\n      enumName,\n      explicitType\n    } = _ref13;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          node: id\n        }, memberName, memberName[0].toUpperCase() + memberName.slice(1), enumName);\n      }\n\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          node: id\n        }, memberName, enumName);\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref14) {\n    let {\n      enumName\n    } = _ref14;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref15) {\n    let {\n      enumName\n    } = _ref15;\n\n    if (this.eatContextual(101)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc\n            }, enumName);\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(138);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(137, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(129, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(136, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(136)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            node\n          });\n        }\n\n        return node;\n\n      case 138:\n      case 129:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(56) && !this.match(139)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(139);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(139);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 138:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 137:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          node: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          node: closingElement\n        }, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            node: closingElement\n          }, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(137)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(138)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(138);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(139);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(138);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 56 && prevType === 138) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 138) {\n      context.push(types.j_oTag);\n    } else if (type === 139) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc\n        }, before, after);\n      }\n    };\n\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc\n        }, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc\n          }, modifier);\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc\n        }, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        node\n      });\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 75) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          node: pattern\n        }, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          node\n        });\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(ErrorMessages.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(ErrorMessages.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            node: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(53)) {\n      return this.isContextual(118);\n    }\n\n    if (this.isContextual(118)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(58);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(118);\n    } else if (this.eatContextual(118)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          node: elementNode\n        });\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          node: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          node: type\n        });\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 130:\n        case 131:\n        case 129:\n        case 85:\n        case 86:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 129:\n      case 130:\n      case 131:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 130 && nextToken.type !== 131) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 87:\n        return this.tsParseTypeQuery();\n\n      case 83:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          node\n        });\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 106) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(ErrorMessages.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc\n      }, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(120) && this.lookahead().type === 77;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc\n      }, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(111) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(109)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        node: moduleReference\n      });\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(116) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(116);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 68:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 75:\n          if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(75);\n            this.expectContextual(122);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 74:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 109:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(129)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n\n    return this.tsParseTypeArguments();\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        node\n      });\n    }\n\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          node: pp\n        });\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        node\n      });\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          node: node.typeAnnotation\n        });\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorLoc = this.state.curPosition();\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArgumentsInExpression();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        node: importNode\n      });\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(83)) {\n      this.next();\n\n      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(124);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(126) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(120) && this.lookahead().type === 80;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(125)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 75) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 122) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(122);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          node: member\n        });\n      }\n\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          node: member\n        }, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          node: member\n        });\n      }\n\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          node: member\n        });\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        node: member\n      });\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          node: member\n        });\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        node: methodOrProp\n      });\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        node: methodOrProp\n      });\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(121);\n\n    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(110)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc\n      }, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        node\n      });\n    }\n\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        node\n      }, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        node: typeParameters\n      });\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        node: method\n      }, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n\n    if (this.eatContextual(110)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        node\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          node: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription) {\n    var _expr$extra2;\n\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(ErrorMessages.InvalidLhs, {\n            node: expr\n          }, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(null, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        node: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n\n    return type;\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n              node: expr\n            });\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        args[_key10 - 1] = arguments[_key10];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(125)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          node\n        });\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          node: method\n        }, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n};\n\nconst PlaceholderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError, \"placeholders\");\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(140)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(140);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(140, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 140) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(81) || this.match(140) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(ErrorMessages.InvalidParenthesizedAssignment, node.loc.start);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(ErrorMessages.InvalidParenthesizedAssignment, {\n            node\n          });\n        }\n      } else {\n        this.raise(ErrorMessages.InvalidParenthesizedAssignment, {\n          node\n        });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(ErrorMessages.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n          break;\n        }\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(ErrorMessages.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod, {\n        node: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(ErrorMessages.RestTrailingComma, {\n        node: prop\n      });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(ErrorMessages.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raise(ErrorMessages.RestTrailingComma, {\n            node: elt\n          });\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(ErrorMessages.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 134) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n    let checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n    let disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n    let strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, {\n              node: expr\n            }, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(ErrorMessages.ParamDupe, {\n                node: expr\n              });\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(ErrorMessages.LetInLexicalBinding, {\n              node: expr\n            });\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.loc.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(ErrorMessages.InvalidPropertyBindingPattern, {\n            node: expr\n          });\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, {\n            node: expr\n          }, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(ErrorMessages.InvalidRestAssignmentPattern, {\n        node: node.argument\n      });\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n\n    this.raise(this.lookaheadCharCode() === close ? ErrorMessages.RestTrailingComma : ErrorMessages.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(ErrorMessages.RecordNoProto, {\n          node: key\n        });\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(ErrorMessages.DuplicateProto, {\n            node: key\n          });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(135)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(105)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(ErrorMessages.PrivateInExpectedIn, {\n          node: left\n        }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n\n        this.next();\n\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(ErrorMessages.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(ErrorMessages.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(105)) {\n                throw this.raise(ErrorMessages.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                }, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(ErrorMessages.PipeUnparenthesizedBody, {\n        at: startLoc\n      }, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(ErrorMessages.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(ErrorMessages.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(ErrorMessages.StrictDelete, {\n            node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(ErrorMessages.DeletePrivateField, {\n            node\n          });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(134)) {\n      if (base.type === \"Super\") {\n        this.raise(ErrorMessages.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(ErrorMessages.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(ErrorMessages.ImportCallArity, {\n          node\n        }, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(ErrorMessages.ImportCallSpreadArgument, {\n              node: arg\n            });\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(ErrorMessages.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n\n      case 83:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(ErrorMessages.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 130:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 131:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 132:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 129:\n        return this.parseStringLiteral(this.state.value);\n\n      case 84:\n        return this.parseNullLiteral();\n\n      case 85:\n        return this.parseBooleanLiteral(true);\n\n      case 86:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 80:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 77:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(ErrorMessages.UnsupportedBind, {\n              node: callee\n            });\n          }\n        }\n\n      case 134:\n        {\n          this.raise(ErrorMessages.PrivateInExpectedIn, {\n            at: this.state.startLoc\n          }, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? ErrorMessages.PrimaryTopicNotAllowed : ErrorMessages.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(ErrorMessages.PipeTopicUnconfiguredToken, {\n        at: startLoc\n      }, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(ErrorMessages.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(ErrorMessages.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(ErrorMessages.SuperNotAllowed, {\n        node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(ErrorMessages.UnexpectedSuper, {\n        node\n      });\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(ErrorMessages.UnsupportedSuper, {\n        node\n      });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(ErrorMessages.UnsupportedMetaProperty, {\n        node: node.property\n      }, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrorMessages.ImportMetaOutsideModule, {\n          node: id\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEndLoc.index);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(ErrorMessages.UnexpectedNewTarget, {\n          node: metaProp\n        });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(ErrorMessages.ImportCallNotNewExpression, {\n        node: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(ErrorMessages.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(ErrorMessages.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(ErrorMessages.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(startLoc, 2)\n        });\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(ErrorMessages.InvalidRecordProperty, {\n          node: prop\n        });\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(ErrorMessages.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(ErrorMessages.AccessorIsGenerator, {\n            at: this.state.curPosition()\n          }, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {\n        node: method\n      });\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(ErrorMessages.BadSetterRestParameter, {\n        node: method\n      });\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(ErrorMessages.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 130:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 129:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 131:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 132:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 134:\n            {\n              const privateKeyLoc = this.state.startLoc;\n\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(ErrorMessages.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 134) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorOrigin = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? {\n            at: node.key.loc.end\n          } : {\n            node\n          };\n          this.raise(ErrorMessages.IllegalLanguageModeDirective, errorOrigin);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(ErrorMessages.UnexpectedToken, {\n          at: this.state.curPosition()\n        }, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(ErrorMessages.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(128);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(ErrorMessages.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(ErrorMessages.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(ErrorMessages.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(ErrorMessages.AwaitBindingIdentifier, startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(ErrorMessages.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(ErrorMessages.UnexpectedKeyword, {\n        at: startLoc\n      }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(ErrorMessages.UnexpectedReservedWord, {\n        at: startLoc\n      }, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(55)) {\n      this.raise(ErrorMessages.ObsoleteAwaitStar, {\n        node\n      });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n\n      switch (this.state.type) {\n        case 13:\n        case 135:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(ErrorMessages.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(ErrorMessages.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(ErrorMessages.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(ErrorMessages.ModuleExportUndefined, {\n          at: loc\n        }, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 64:\n        return this.parseDebuggerStatement(node);\n\n      case 90:\n        return this.parseDoStatement(node);\n\n      case 91:\n        return this.parseForStatement(node);\n\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(ErrorMessages.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(ErrorMessages.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 80:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 69:\n        return this.parseIfStatement(node);\n\n      case 70:\n        return this.parseReturnStatement(node);\n\n      case 71:\n        return this.parseSwitchStatement(node);\n\n      case 72:\n        return this.parseThrowStatement(node);\n\n      case 73:\n        return this.parseTryStatement(node);\n\n      case 75:\n      case 74:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(ErrorMessages.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 92:\n        return this.parseWhileStatement(node);\n\n      case 76:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(ErrorMessages.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 83) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(ErrorMessages.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrorMessages.ImportOutsideModule, {\n        node\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(ErrorMessages.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(ErrorMessages.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(ErrorMessages.IllegalBreakContinue, {\n        node\n      }, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(99);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(74) || this.match(75) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(ErrorMessages.ForOfLet, {\n          node: init\n        });\n      }\n\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(ErrorMessages.ForOfAsync, {\n          node: init\n        });\n      }\n    }\n\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(ErrorMessages.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(ErrorMessages.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(ErrorMessages.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(ErrorMessages.NoCatchOrFinally, {\n        node\n      });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(ErrorMessages.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(ErrorMessages.LabelRedeclaration, {\n          node: expr\n        }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(ErrorMessages.ForInOfLoopInitializer, {\n        node: init\n      }, isForIn ? \"for-in\" : \"for-of\");\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(ErrorMessages.InvalidLhs, {\n        node: init\n      }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(29)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          if (!isTypescript) {\n            this.raise(ErrorMessages.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc\n            }, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(ErrorMessages.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc\n          }, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(55) && isHangingStatement) {\n      this.raise(ErrorMessages.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.generator = this.eat(55);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(ErrorMessages.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(ErrorMessages.DecoratorConstructor, {\n            node: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(ErrorMessages.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(134);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(ErrorMessages.ConstructorIsGenerator, {\n          node: publicMethod.key\n        });\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(134);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(ErrorMessages.DuplicateConstructor, {\n            node: key\n          });\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(ErrorMessages.OverrideOnConstructor, {\n            node: key\n          });\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(134);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(ErrorMessages.ConstructorIsAsync, {\n            node: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(ErrorMessages.ConstructorIsAccessor, {\n            node: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n\n    if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n      this.raise(ErrorMessages.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (type === 134) {\n      if (value === \"constructor\") {\n        this.raise(ErrorMessages.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(ErrorMessages.DecoratorStaticBlock, {\n        node: member\n      });\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(ErrorMessages.ConstructorClassField, {\n        node: prop.key\n      });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(ErrorMessages.ConstructorClassField, {\n          node: key\n        });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(ErrorMessages.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(65)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(68) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    }\n\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(ErrorMessages.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(ErrorMessages.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n\n      if ((type === 126 || type === 125) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(ErrorMessages.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(ErrorMessages.ExportDefaultFromAsIdentifier, {\n              node: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(ErrorMessages.ExportBindingIsString, {\n                node: specifier\n              }, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(ErrorMessages.UnsupportedDecoratorExport, {\n        node\n      });\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, {\n        node\n      }, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(126);\n      const isString = this.match(129);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(129)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(ErrorMessages.ModuleExportNameHasLoneSurrogate, {\n          node: result\n        }, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(129)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(129)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc\n        }, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(129)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(ErrorMessages.ModuleAttributeDifferentFromType, {\n          node: node.key\n        }, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {\n          node: node.key\n        }, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(ErrorMessages.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(129);\n      const isMaybeTypeOnly = this.isContextual(126);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(ErrorMessages.ImportBindingIsString, {\n          node: specifier\n        }, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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","names":["BaseParser","constructor","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","get","key","Object","keys","getPluginOption","plugin","name","_this$plugins$get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","start","CommentsParser","addComment","comment","filename","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","end","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","code","templates","forEach","template","ParserError","raise","origin","raiseWithData","at","raiseOverwrite","pos","index","message","replace","_","line","column","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","defineProperty","toUnenumerable","object","enumerable","value","toESTreeLocation","superClass","parse","file","tokens","map","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","Errors","finishCallExpression","optional","callee","source","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","Position","col","SourceLocation","identifierName","createPositionWithColumnOffset","position","columnOffset","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","unexpected","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","_isDigit","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","_jsx3","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","reportReservedArrowTypeParam","_typeCast","_typeCast2","_typeCast3","trailingComma","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceholderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","_node$extra2","checkToRestConversion","arg","_node$extra3","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorOrigin","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/base.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/comments.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/error-codes.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/error-message.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/error.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/estree.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/tokenizer/context.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/tokenizer/types.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/location.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/identifier.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/scopeflags.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/scope.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/flow/scope.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/whitespace.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/tokenizer/state.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/tokenizer/index.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/class-scope.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/expression-scope.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/util/production-parameter.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/util.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/node.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/flow/index.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/jsx/index.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/typescript/scope.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/typescript/index.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/placeholders.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugins/v8intrinsic.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/plugin-utils.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/options.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/lval.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/expression.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/statement.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/parser/index.js","/Users/karvonen/Valet/udemy-port/jbook/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    IncompatibleRegExpUVFlags:\n      \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(loc.index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    this.errors.set(loc.index, { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    this.errors.delete(loc.index);\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { node: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}