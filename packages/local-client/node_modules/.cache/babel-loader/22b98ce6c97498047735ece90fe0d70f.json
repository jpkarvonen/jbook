{"ast":null,"code":"var _jsxFileName = \"/Users/karvonen/Valet/udemy-port/jbook/src/components/code-editor.tsx\";\nimport MonacoEditor from '@monaco-editor/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = _ref => {\n  let {\n    onChange,\n    initialValue\n  } = _ref;\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(MonacoEditor, {\n    editorDidMount: onEditorDidMount,\n    value: initialValue,\n    theme: \"dark\",\n    language: \"javascript\",\n    height: \"500px\",\n    options: {\n      wordWrap: 'on',\n      minimap: {\n        enabled: false\n      },\n      showUnused: false,\n      folding: false,\n      lineNumbersMinChars: 3,\n      fontSize: 16,\n      scrollBeyondLastLine: false,\n      automaticLayout: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/src/components/code-editor.tsx"],"names":["MonacoEditor","CodeEditor","onChange","initialValue","onEditorDidMount","getValue","monacoEditor","onDidChangeModelContent","getModel","updateOptions","tabSize","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";AAAA,OAAOA,YAAP,MAA6C,sBAA7C;;;AAOA,MAAMC,UAAqC,GAAG,QAAgC;AAAA,MAA/B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA+B;;AAC5E,QAAMC,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACnEA,IAAAA,YAAY,CAACC,uBAAb,CAAqC,MAAM;AACzCL,MAAAA,QAAQ,CAACG,QAAQ,EAAT,CAAR;AACD,KAFD;AAIA,6BAAAC,YAAY,CAACE,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AACD,GAND;;AAQA,sBACE,QAAC,YAAD;AACE,IAAA,cAAc,EAAEN,gBADlB;AAEE,IAAA,KAAK,EAAED,YAFT;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,QAAQ,EAAC,YAJX;AAKE,IAAA,MAAM,EAAC,OALT;AAME,IAAA,OAAO,EAAE;AACPQ,MAAAA,QAAQ,EAAE,IADH;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFF;AAGPC,MAAAA,UAAU,EAAE,KAHL;AAIPC,MAAAA,OAAO,EAAE,KAJF;AAKPC,MAAAA,mBAAmB,EAAE,CALd;AAMPC,MAAAA,QAAQ,EAAE,EANH;AAOPC,MAAAA,oBAAoB,EAAE,KAPf;AAQPC,MAAAA,eAAe,EAAE;AARV;AANX;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5BD;;KAAMlB,U;AA8BN,eAAeA,UAAf","sourcesContent":["import MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  return (\n    <MonacoEditor\n      editorDidMount={onEditorDidMount}\n      value={initialValue}\n      theme=\"dark\"\n      language=\"javascript\"\n      height=\"500px\"\n      options={{\n        wordWrap: 'on',\n        minimap: { enabled: false },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true,\n      }}\n    />\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}