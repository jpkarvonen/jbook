{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"source\", \"style\", \"onScroll\", \"onMouseOver\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useImperativeHandle } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport { loadLang } from './langs';\nimport \"./styles/markdown.css\";\nimport \"./styles/markdowncolor.css\";\nexport default /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _ref = props || {},\n      className = _ref.className,\n      source = _ref.source,\n      style = _ref.style,\n      onScroll = _ref.onScroll,\n      onMouseOver = _ref.onMouseOver,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var mdp = /*#__PURE__*/React.createRef();\n  var loadedLang = React.useRef(['markup']);\n  useEffect(function () {\n    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [source]);\n\n  function highlight() {\n    return _highlight.apply(this, arguments);\n  }\n\n  function _highlight() {\n    _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var codes, _iterator, _step, val, tag, lang;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (mdp.current) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              codes = mdp.current.getElementsByTagName('code');\n              _iterator = _createForOfIteratorHelper(codes);\n              _context.prev = 4;\n\n              _iterator.s();\n\n            case 6:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 24;\n                break;\n              }\n\n              val = _step.value;\n              tag = val.parentNode;\n\n              if (!(tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim()))) {\n                _context.next = 22;\n                break;\n              }\n\n              lang = val.className.trim().replace(/^language-/, '');\n              _context.prev = 11;\n\n              if (loadedLang.current.includes(lang)) {\n                _context.next = 16;\n                break;\n              }\n\n              loadedLang.current.push(lang);\n              _context.next = 16;\n              return loadLang(lang);\n\n            case 16:\n              _context.next = 18;\n              return Prism.highlightElement(val);\n\n            case 18:\n              _context.next = 22;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n\n            case 22:\n              _context.next = 6;\n              break;\n\n            case 24:\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t1 = _context[\"catch\"](4);\n\n              _iterator.e(_context.t1);\n\n            case 29:\n              _context.prev = 29;\n\n              _iterator.f();\n\n              return _context.finish(29);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 26, 29, 32], [11, 20]]);\n    }));\n    return _highlight.apply(this, arguments);\n  }\n\n  useImperativeHandle(ref, function () {\n    return _objectSpread(_objectSpread({}, props), {}, {\n      lang: loadedLang.current,\n      mdp: mdp\n    });\n  }, [mdp, props]);\n  var cls = \"wmde-markdown wmde-markdown-color \".concat(className || '');\n\n  var reactMarkdownProps = _objectSpread(_objectSpread({\n    allowDangerousHtml: true,\n    allowNode: function allowNode(node, index, parent) {\n      if (node.type === 'html' && reactMarkdownProps.allowDangerousHtml) {\n        // filter style\n        node.value = node.value.replace(/<((style|script|link|input|form)|\\/(style|script|link|input|form))(\\s?[^>]*>)/gi, function (a) {\n          return a.replace(/[<>]/g, function (e) {\n            return {\n              '<': '&lt;',\n              '>': '&gt;'\n            }[e];\n          });\n        });\n      }\n\n      return true;\n    }\n  }, other), {}, {\n    plugins: [gfm].concat(_toConsumableArray(other.plugins || [])),\n    source: source || ''\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mdp,\n    onScroll: onScroll,\n    onMouseOver: onMouseOver,\n    className: cls,\n    style: style\n  }, /*#__PURE__*/React.createElement(ReactMarkdown, reactMarkdownProps));\n});","map":{"version":3,"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,mBAA3B,QAAsD,OAAtD;AACA,OAAOC,aAAP,MAAkD,gBAAlD;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iCAAP;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA;AACA;AAeA,4BAAeN,KAAK,CAACO,UAANP,CAA2D,UAACQ,KAAD,EAAQC,GAAR,EAAgB;AACxF,aAAuED,KAAK,IAAI,EAAhF;AAAA,MAAQE,SAAR,QAAQA,SAAR;AAAA,MAAmBC,MAAnB,QAAmBA,MAAnB;AAAA,MAA2BC,KAA3B,QAA2BA,KAA3B;AAAA,MAAkCC,QAAlC,QAAkCA,QAAlC;AAAA,MAA4CC,WAA5C,QAA4CA,WAA5C;AAAA,MAA4DC,KAA5D;;AACA,MAAMC,GAAG,gBAAGhB,KAAK,CAACiB,SAANjB,EAAZ;AACA,MAAMkB,UAAU,GAAGlB,KAAK,CAACmB,MAANnB,CAAuB,CAAC,QAAD,CAAvBA,CAAnB;AACAC,WAAS,CAAC,YAAM;AACdmB,aAAS,GADK,CAEd;AAFO,KAGN,CAACT,MAAD,CAHM,CAATV;;AAJwF,WASzEmB,SATyE;AAAA;AAAA;;AAAA;AAAAC,0EASxF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACOL,GAAG,CAACM,OADX;AAAAC;AAAA;AAAA;;AAAA;;AAAA;AAEQC,mBAFR,GAEgBR,GAAG,CAACM,OAAJN,CAAYS,oBAAZT,CAAiC,MAAjCA,CAARQ;AAFRE,qDAGoBF,KAHpB;AAAAD;;AAAAG;;AAAA;AAAA;AAAAH;AAAA;AAAA;;AAGaI,iBAHb,cAGaA;AACHC,iBAJV,GAIgBD,GAAG,CAACE,UAAVD;;AAJV,oBAKQA,GAAG,IAAIA,GAAG,CAACE,OAAJF,KAAgB,KAAvBA,IAAgC,aAAaG,IAAb,CAAkBJ,GAAG,CAACjB,SAAJiB,CAAcK,IAAdL,EAAlB,CALxC;AAAAJ;AAAA;AAAA;;AAMYU,kBANZ,GAMmBN,GAAG,CAACjB,SAAJiB,CAAcK,IAAdL,GAAqBO,OAArBP,CAA6B,YAA7BA,EAA2C,EAA3CA,CAAPM;AANZV;;AAAA,kBAQaL,UAAU,CAACI,OAAXJ,CAAmBiB,QAAnBjB,CAA4Be,IAA5Bf,CARb;AAAAK;AAAA;AAAA;;AASUL,wBAAU,CAACI,OAAXJ,CAAmBkB,IAAnBlB,CAAwBe,IAAxBf;AATVK;AAAA,qBAUgBjB,QAAQ,CAAC2B,IAAD,CAVxB;;AAAA;AAAAV;AAAA,qBAYclB,KAAK,CAACgC,gBAANhC,CAAuBsB,GAAvBtB,CAZd;;AAAA;AAAAkB;AAAA;;AAAA;AAAAA;AAAAA;;AAAA;AAAAA;AAAA;;AAAA;AAAAA;AAAA;;AAAA;AAAAA;AAAAA;;AAAAG;;AAAA;AAAAH;;AAAAG;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATwF;AAAA;AAAA;;AA2BxFxB,qBAAmB,CAACO,GAAD,EAAM;AAAA,2CAAYD,KAAZ;AAAmByB,UAAI,EAAEf,UAAU,CAACI,OAApC;AAA6CN,SAAG,EAAHA;AAA7C;AAAN,KAA2D,CAACA,GAAD,EAAMR,KAAN,CAA3D,CAAnBN;AAEA,MAAMoC,GAAG,+CAAwC5B,SAAS,IAAI,EAArD,CAAT;;AACA,MAAM6B,kBAAkB;AACtBC,sBAAkB,EAAE,IADE;AAEtBC,aAAS,EAAE,mBAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAyB;AAClC,UAAIF,IAAI,CAACG,IAALH,KAAc,MAAdA,IAAwBH,kBAAkB,CAACC,kBAA/C,EAAmE;AACjE;AACAE,YAAI,CAACI,KAALJ,GAAcA,IAAI,CAACI,KAALJ,CAAsBR,OAAtBQ,CAA8B,iFAA9BA,EAAiH,UAACK,CAAD,EAAe;AAC5I,iBAAOA,CAAC,CAACb,OAAFa,CAAU,OAAVA,EAAmB,UAACC,CAAD;AAAA,mBAAiB;AAAE,mBAAK,MAAP;AAAe,mBAAK;AAApB,cAA2DA,CAA3D,CAAjB;AAAnB,YAAP;AADW,SAACN,CAAdA;AAGD;;AACD,aAAO,IAAP;AACD;AAVqB,KAWnB3B,KAXmB;AAYtBkC,WAAO,GAAG7C,GAAH,4BAAaW,KAAK,CAACkC,OAANlC,IAAiB,EAA9B,EAZe;AAatBJ,UAAM,EAAEA,MAAM,IAAI;AAbI,IAAxB;;AAeA,sBACEX;AAAKS,OAAG,EAAEO,GAAV;AAAeH,YAAQ,EAAEA,QAAzB;AAAmCC,eAAW,EAAEA,WAAhD;AAA6DJ,aAAS,EAAE4B,GAAxE;AAA6E1B,SAAK,EAAEA;AAApF,kBACEZ,oBAACG,aAAD,EAAmBoC,kBAAnB,CADF,CADF;AA7Ca,EAAf","names":["React","useEffect","useImperativeHandle","ReactMarkdown","gfm","Prism","loadLang","forwardRef","props","ref","className","source","style","onScroll","onMouseOver","other","mdp","createRef","loadedLang","useRef","highlight","_highlight","current","_context","codes","getElementsByTagName","_iterator","val","tag","parentNode","tagName","test","trim","lang","replace","includes","push","highlightElement","cls","reactMarkdownProps","allowDangerousHtml","allowNode","node","index","parent","type","value","a","e","plugins"],"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/node_modules/@uiw/react-markdown-preview/src/index.tsx"],"sourcesContent":["import React, { useEffect, useImperativeHandle } from 'react';\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport { loadLang } from './langs';\nimport './styles/markdown.less';\nimport './styles/markdowncolor.less';\n\nexport type MarkdownPreviewProps = {\n  className?: string;\n  source?: string;\n  style?: React.CSSProperties;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  onMouseOver?: (e: React.MouseEvent<HTMLDivElement>) => void;\n} & ReactMarkdownProps;\n\nexport type MarkdownPreviewRef = {\n  mdp: React.RefObject<HTMLDivElement>;\n  lang: string[],\n} & MarkdownPreviewProps;\n\nexport default React.forwardRef<MarkdownPreviewRef, MarkdownPreviewProps>((props, ref) => {\n  const { className, source, style, onScroll, onMouseOver, ...other  } = props || {};\n  const mdp = React.createRef<HTMLDivElement>();\n  const loadedLang = React.useRef<string[]>(['markup']);\n  useEffect(() => {\n    highlight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [source]);\n\n  async function highlight() {\n    if (!mdp.current) return;\n    const codes = mdp.current.getElementsByTagName('code') as unknown as HTMLElement[];\n    for (const val of codes) {\n      const tag = val.parentNode as HTMLElement;\n      if (tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim())) {\n        const lang = val.className.trim().replace(/^language-/, '');\n        try {\n          if (!loadedLang.current.includes(lang as never)) {\n            loadedLang.current.push(lang);\n            await loadLang(lang);\n          }\n          await Prism.highlightElement(val);\n        } catch (error) { }\n      }\n    }\n  }\n\n  useImperativeHandle(ref, () => ({ ...props, lang: loadedLang.current, mdp }), [mdp, props]);\n\n  const cls = `wmde-markdown wmde-markdown-color ${className || ''}`;\n  const reactMarkdownProps = {\n    allowDangerousHtml: true,\n    allowNode: (node, index, parent) => {\n      if (node.type === 'html' && reactMarkdownProps.allowDangerousHtml) {\n        // filter style\n        node.value = (node.value as string).replace(/<((style|script|link|input|form)|\\/(style|script|link|input|form))(\\s?[^>]*>)/gi, (a: string) => {\n          return a.replace(/[<>]/g, (e: string) => (({ '<': '&lt;', '>': '&gt;' } as { [key: string]: string })[e]))\n        });\n      }\n      return true;\n    },\n    ...other,\n    plugins: [gfm,  ...(other.plugins || [])],\n    source: source || '',\n  } as ReactMarkdownProps;\n  return (\n    <div ref={mdp} onScroll={onScroll} onMouseOver={onMouseOver} className={cls} style={style}>\n      <ReactMarkdown {...reactMarkdownProps} />\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}