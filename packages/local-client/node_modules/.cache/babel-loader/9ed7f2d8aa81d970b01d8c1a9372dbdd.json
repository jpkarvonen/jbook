{"ast":null,"code":"import axios from 'axios';\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\n\nasync () => {\n  await fileCache.setItem('color', 'red');\n  const color = await fileCache.getItem('color');\n  console.log(color);\n};\n\nexport const unpkgPathPlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n\n    setup(build) {\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        console.log('onResolve', args);\n\n        if (args.path === 'index.js') {\n          return {\n            path: args.path,\n            namespace: 'a'\n          };\n        }\n\n        if (args.path.includes('./') || args.path.includes('../')) {\n          return {\n            namespace: 'a',\n            path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href\n          };\n        }\n\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: `\n              import React, { useState } from 'react'\n              console.log(React, useState); \n            `\n          };\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        return {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/src/plugins/unpkg-path-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","setItem","color","getItem","console","log","unpkgPathPlugin","setup","build","onResolve","filter","args","path","namespace","includes","URL","resolveDir","href","onLoad","loader","contents","data","request","get","responseURL","pathname"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AAC3CC,EAAAA,IAAI,EAAE;AADqC,CAA3B,CAAlB;;AAIA,YAAY;AACV,QAAMF,SAAS,CAACG,OAAV,CAAkB,OAAlB,EAA2B,KAA3B,CAAN;AAEA,QAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACK,OAAV,CAAkB,OAAlB,CAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD,CAND;;AAQA,OAAO,MAAMI,eAAe,GAAG,MAAM;AACnC,SAAO;AACLN,IAAAA,IAAI,EAAE,mBADD;;AAELO,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAChCA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOC,IAAP,IAAqB;AACrDP,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,IAAzB;;AACA,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC5B,iBAAO;AAAEA,YAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,YAAAA,SAAS,EAAE;AAA9B,WAAP;AACD;;AACD,YAAIF,IAAI,CAACC,IAAL,CAAUE,QAAV,CAAmB,IAAnB,KAA4BH,IAAI,CAACC,IAAL,CAAUE,QAAV,CAAmB,KAAnB,CAAhC,EAA2D;AACzD,iBAAO;AACLD,YAAAA,SAAS,EAAE,GADN;AAELD,YAAAA,IAAI,EAAE,IAAIG,GAAJ,CACJJ,IAAI,CAACC,IADD,EAEJ,sBAAsBD,IAAI,CAACK,UAA3B,GAAwC,GAFpC,EAGJC;AALG,WAAP;AAOD;;AACD,eAAO;AACLJ,UAAAA,SAAS,EAAE,GADN;AAELD,UAAAA,IAAI,EAAG,qBAAoBD,IAAI,CAACC,IAAK;AAFhC,SAAP;AAID,OAlBD;AAoBAJ,MAAAA,KAAK,CAACU,MAAN,CAAa;AAAER,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAAqB;AAClDP,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBM,IAAtB;;AAEA,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC5B,iBAAO;AACLO,YAAAA,MAAM,EAAE,KADH;AAELC,YAAAA,QAAQ,EAAG;AACvB;AACA;AACA;AALiB,WAAP;AAOD;;AAED,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAM1B,KAAK,CAAC2B,GAAN,CAAUZ,IAAI,CAACC,IAAf,CAAhC;AACA,eAAO;AACLO,UAAAA,MAAM,EAAE,KADH;AAELC,UAAAA,QAAQ,EAAEC,IAFL;AAGLL,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcO,OAAO,CAACE,WAAtB,EAAmCC;AAH1C,SAAP;AAKD,OAnBD;AAoBD;;AA3CI,GAAP;AA6CD,CA9CM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n  name: 'filecache',\n});\n\nasync () => {\n  await fileCache.setItem('color', 'red');\n\n  const color = await fileCache.getItem('color');\n\n  console.log(color);\n};\n\nexport const unpkgPathPlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n    setup(build: esbuild.PluginBuild) {\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\n        console.log('onResolve', args);\n        if (args.path === 'index.js') {\n          return { path: args.path, namespace: 'a' };\n        }\n        if (args.path.includes('./') || args.path.includes('../')) {\n          return {\n            namespace: 'a',\n            path: new URL(\n              args.path,\n              'https://unpkg.com' + args.resolveDir + '/'\n            ).href,\n          };\n        }\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`,\n        };\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: `\n              import React, { useState } from 'react'\n              console.log(React, useState); \n            `,\n          };\n        }\n\n        const { data, request } = await axios.get(args.path);\n        return {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        };\n      });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}