{"ast":null,"code":"import produce from 'immer';\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionType.FETCH_CELLS:\n      state.loading = true;\n      state.error = null;\n      return state;\n\n    case ActionType.FETCH_CELLS_COMPLETE:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n\n    case ActionType.FETCH_CELLS_ERROR:\n      return state;\n\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_AFTER:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","FETCH_CELLS","FETCH_CELLS_COMPLETE","payload","FETCH_CELLS_ERROR","UPDATE_CELL","id","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce(\n  (state: CellsState = initialState, action: Action): CellsState => {\n    switch (action.type) {\n      case ActionType.FETCH_CELLS:\n        state.loading = true;\n        state.error = null;\n\n        return state;\n      case ActionType.FETCH_CELLS_COMPLETE:\n        state.loading = false;\n        state.error = action.payload;\n        return state;\n      case ActionType.FETCH_CELLS_ERROR:\n        return state;\n\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n        if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetIndex];\n        state.order[targetIndex] = action.payload.id;\n\n        return state;\n      case ActionType.INSERT_CELL_AFTER:\n        const cell: Cell = {\n          content: '',\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.unshift(cell.id);\n        } else {\n          state.order.splice(foundIndex + 1, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  }\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}