{"ast":null,"code":"import _slicedToArray from\"/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./text-editor.css';import MDEditor from'@uiw/react-md-editor';import{useState,useEffect,useRef}from'react';import{useActions}from'../hooks/use-actions';import{jsx as _jsx}from\"react/jsx-runtime\";var TextEditor=function TextEditor(_ref){var cell=_ref.cell;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),editing=_useState2[0],setEditing=_useState2[1];var ref=useRef(null);var _useActions=useActions(),updateCell=_useActions.updateCell;useEffect(function(){var listener=function listener(event){if(ref.current&&event.target&&ref.current.contains(event.target)){return;}setEditing(false);};document.addEventListener('click',listener,{capture:true});return function(){document.removeEventListener('click',listener,{capture:true});};},[]);if(editing){return/*#__PURE__*/_jsx(\"div\",{className:\"text-editor\",ref:ref,children:/*#__PURE__*/_jsx(MDEditor,{value:cell.content,onChange:function onChange(v){return updateCell(cell.id,v||'');}})});}return/*#__PURE__*/_jsx(\"div\",{className:\"text-editor card\",onClick:function onClick(){return setEditing(true);},children:/*#__PURE__*/_jsx(\"div\",{className:\"card-content\",children:/*#__PURE__*/_jsx(MDEditor.Markdown,{source:cell.content||'Click to edit'})})});};export default TextEditor;","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/src/components/text-editor.tsx"],"names":["MDEditor","useState","useEffect","useRef","useActions","TextEditor","cell","editing","setEditing","ref","updateCell","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":"kJAAA,MAAO,mBAAP,CACA,MAAOA,CAAAA,QAAP,KAAqB,sBAArB,CACA,OAASC,QAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,CAEA,OAASC,UAAT,KAA2B,sBAA3B,C,2CAMA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CAC1D,cAA8BL,QAAQ,CAAC,KAAD,CAAtC,wCAAOM,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,GAAG,CAAGN,MAAM,CAAwB,IAAxB,CAAlB,CAEA,gBAAuBC,UAAU,EAAjC,CAAQM,UAAR,aAAQA,UAAR,CAEAR,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAuB,CACtC,GACEH,GAAG,CAACI,OAAJ,EACAD,KAAK,CAACE,MADN,EAEAL,GAAG,CAACI,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAHF,CAIE,CACA,OACD,CACDN,UAAU,CAAC,KAAD,CAAV,CACD,CATD,CAUAQ,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCN,QAAnC,CAA6C,CAAEO,OAAO,CAAE,IAAX,CAA7C,EAEA,MAAO,WAAM,CACXF,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,CAAsCR,QAAtC,CAAgD,CAAEO,OAAO,CAAE,IAAX,CAAhD,EACD,CAFD,CAGD,CAhBQ,CAgBN,EAhBM,CAAT,CAkBA,GAAIX,OAAJ,CAAa,CACX,mBACE,YAAK,SAAS,CAAC,aAAf,CAA6B,GAAG,CAAEE,GAAlC,uBACE,KAAC,QAAD,EACE,KAAK,CAAEH,IAAI,CAACc,OADd,CAEE,QAAQ,CAAE,kBAACC,CAAD,QAAOX,CAAAA,UAAU,CAACJ,IAAI,CAACgB,EAAN,CAAUD,CAAC,EAAI,EAAf,CAAjB,EAFZ,EADF,EADF,CAQD,CAED,mBACE,YAAK,SAAS,CAAC,kBAAf,CAAkC,OAAO,CAAE,yBAAMb,CAAAA,UAAU,CAAC,IAAD,CAAhB,EAA3C,uBACE,YAAK,SAAS,CAAC,cAAf,uBACE,KAAC,QAAD,CAAU,QAAV,EAAmB,MAAM,CAAEF,IAAI,CAACc,OAAL,EAAgB,eAA3C,EADF,EADF,EADF,CAOD,CA1CD,CA4CA,cAAef,CAAAA,UAAf","sourcesContent":["import './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useState, useEffect, useRef } from 'react';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface TextEditorProps {\n  cell: Cell;\n}\n\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\n  const [editing, setEditing] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const { updateCell } = useActions();\n\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (\n        ref.current &&\n        event.target &&\n        ref.current.contains(event.target as Node)\n      ) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener('click', listener, { capture: true });\n\n    return () => {\n      document.removeEventListener('click', listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div className=\"text-editor\" ref={ref}>\n        <MDEditor\n          value={cell.content}\n          onChange={(v) => updateCell(cell.id, v || '')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"text-editor card\" onClick={() => setEditing(true)}>\n      <div className=\"card-content\">\n        <MDEditor.Markdown source={cell.content || 'Click to edit'} />\n      </div>\n    </div>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}