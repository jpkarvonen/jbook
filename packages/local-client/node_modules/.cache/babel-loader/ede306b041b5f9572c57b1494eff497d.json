{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from '../action-types';\nimport bundle from '../../bundler';\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, type) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCell = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get('./cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.FETCH_CELLS_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/karvonen/Valet/udemy-port/jbook/packages/local-client/src/state/action-creators/index.ts"],"names":["axios","ActionType","bundle","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCell","FETCH_CELLS","data","get","FETCH_CELLS_COMPLETE","err","FETCH_CELLS_ERROR","message"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AAUA,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAaC,OAAb,KAAmD;AAC3E,SAAO;AACLC,IAAAA,IAAI,EAAEL,UAAU,CAACM,WADZ;AAELC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,EADO;AAEPC,MAAAA;AAFO;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAMI,UAAU,GAAIL,EAAD,IAAkC;AAC1D,SAAO;AACLE,IAAAA,IAAI,EAAEL,UAAU,CAACS,WADZ;AAELF,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMO,QAAQ,GAAG,CAACP,EAAD,EAAaQ,SAAb,KAAsD;AAC5E,SAAO;AACLN,IAAAA,IAAI,EAAEL,UAAU,CAACY,SADZ;AAELL,IAAAA,OAAO,EAAE;AACPJ,MAAAA,EADO;AAEPQ,MAAAA;AAFO;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAME,eAAe,GAAG,CAC7BV,EAD6B,EAE7BE,IAF6B,KAGH;AAC1B,SAAO;AACLA,IAAAA,IAAI,EAAEL,UAAU,CAACc,iBADZ;AAELP,IAAAA,OAAO,EAAE;AACPJ,MAAAA,EADO;AAEPE,MAAAA;AAFO;AAFJ,GAAP;AAOD,CAXM;AAaP,OAAO,MAAMU,YAAY,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KAAmC;AAC7D,SAAO,MAAOC,QAAP,IAAsC;AAC3CA,IAAAA,QAAQ,CAAC;AACPb,MAAAA,IAAI,EAAEL,UAAU,CAACmB,YADV;AAEPZ,MAAAA,OAAO,EAAE;AACPS,QAAAA;AADO;AAFF,KAAD,CAAR;AAOA,UAAMI,MAAM,GAAG,MAAMnB,MAAM,CAACgB,KAAD,CAA3B;AAEAC,IAAAA,QAAQ,CAAC;AACPb,MAAAA,IAAI,EAAEL,UAAU,CAACqB,eADV;AAEPd,MAAAA,OAAO,EAAE;AACPS,QAAAA,MADO;AAEPf,QAAAA,MAAM,EAAEmB;AAFD;AAFF,KAAD,CAAR;AAOD,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAME,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAOJ,QAAP,IAAsC;AAC3CA,IAAAA,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAEL,UAAU,CAACuB;AAAnB,KAAD,CAAR;;AAEA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAA6B,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,SAAV,CAAzC;AACAP,MAAAA,QAAQ,CAAC;AACPb,QAAAA,IAAI,EAAEL,UAAU,CAAC0B,oBADV;AAEPnB,QAAAA,OAAO,EAAEiB;AAFF,OAAD,CAAR;AAID,KAND,CAME,OAAOG,GAAP,EAAiB;AACjBT,MAAAA,QAAQ,CAAC;AACPb,QAAAA,IAAI,EAAEL,UAAU,CAAC4B,iBADV;AAEPrB,QAAAA,OAAO,EAAEoB,GAAG,CAACE;AAFN,OAAD,CAAR;AAID;AACF,GAfD;AAgBD,CAjBM","sourcesContent":["import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport { ActionType } from '../action-types';\nimport { Cell, CellTypes } from '../cell';\nimport bundle from '../../bundler';\nimport {\n  Action,\n  UpdateCellAction,\n  DeleteCellAction,\n  MoveCellAction,\n  InsertCellAfterAction,\n  Direction,\n} from '../actions';\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  type: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n\nexport const fetchCell = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_CELLS });\n\n    try {\n      const { data }: { data: Cell[] } = await axios.get('./cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data,\n      });\n    } catch (err: any) {\n      dispatch({\n        type: ActionType.FETCH_CELLS_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}